import pprint
import pickle
import logging
from datetime import datetime
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, Text
from zoneinfo import ZoneInfo
from markups.inline_keyboards import groups_keyboard, subgroups_keyboard, MenuCD, edit_keyboard
from parsing import parsing_nevatom

logger = logging.getLogger('logs.user_handlers')

router = Router()
CATALOG = []


def get_group_name(category: int):
    return list(filter(lambda y: y.id == category, CATALOG))[0].caption


def get_attr(category: int, subcategory: int, param: str):
    a = list(filter(lambda x: x.id == category, CATALOG))[0].subgroups
    b = list(filter(lambda y: y.id == subcategory, a))[0]
    dic_ = {'caption': b.__getattribute__('caption'),
            'caption_translit': b.__getattribute__('caption_translit'),
            'url_path': b.__getattribute__('url_path'),
            # 'subgroups': b.__getattribute__('subgroups')
            }
    return dic_[param]


@router.message(Command("start"))
async def start_handler1(msg: Message, bot: Bot, *args, **kwargs):
    logger.info(f'{msg.from_user.id} - /start')
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç.\n"
                     "–ö–æ–º–∞–Ω–¥—ã:\n"
                     "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n"
                     "/nevatom - –∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ Nevatom")


@router.message(Command("help"))
async def start_handler1(msg: Message, *args, **kwargs):
    logger.info(f'{msg.from_user.id} - /help')
    await msg.answer("–î–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö —Å —Å–∞–π—Ç–∞ Nevatom –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. "
                     "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∏–∂–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.  "
                     "–û–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω.\n"
                     "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª–∞–º –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ '‚¨ÖÔ∏è –ù–ê–ó–ê–î –í –ö–ê–¢–ê–õ–û–ì'.\n"
                     "–í—ã–±–µ—Ä–∏ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–ø—É—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ 'üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ü–û–ò–°–ö'.\n"
                     "–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–∏—à–Ω–µ–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ 'üí¨ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –í–´–ë–†–ê–ù–ù–û–ï'")


@router.message(Command("nevatom"))
async def start_handler2(msg: Message, list_callbackcodes: list, list_captions: list, list_urls: list):
    logger.info(f'{msg.from_user.id} - /nevatom')
    temp_answer = await msg.answer("–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–∞–π—Ç–∞...")

    if parsing_nevatom.get_catalog():
        with open('files/nevatom_catalog.pickle', 'rb') as fil:
            global CATALOG
            CATALOG = pickle.load(fil)
    else:
        error_msg = '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ —Å–∞–π—Ç–µ Nevatom, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
        logger.error(f'{msg.from_user.id} - {error_msg}')
        await msg.answer(error_msg)
        return

    list_callbackcodes.clear()
    list_captions.clear()
    list_urls.clear()
    await msg.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, "
                     "–æ–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω.\n"
                     "–£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ - –Ω–∞–∂–º–∏ 'üí¨ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –°–ü–ò–°–û–ö...'\n"
                     "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª–∞–º - –Ω–∞–∂–º–∏ '‚¨ÖÔ∏è –ù–ê–ó–ê–î'\n"
                     "–í—ã–±–µ—Ä–∏ —Ç–∞–∫ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∂–º–∏ 'üöÄ –ó–ê–ü–£–°–ö'")
    await temp_answer.delete()
    await msg.answer("–ö–ê–¢–ê–õ–û–ì",
                     reply_markup=groups_keyboard(CATALOG))


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
@router.callback_query(MenuCD.filter(F.level == '0'))
async def process_catalog_button_press(callback: CallbackQuery, callback_data: MenuCD, list_captions: list):
    group_name = get_group_name(callback_data.category)
    sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions) if list_captions else '–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω'
    await callback.message.edit_text(
        text=sel,
        reply_markup=subgroups_keyboard(callback_data.category))


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(MenuCD.filter(F.level == '1'))
async def process_subcategory_button_press(callback: CallbackQuery, callback_data: MenuCD, list_callbackcodes: list, list_captions: list, list_urls: list):
    if callback.data not in list_callbackcodes:
        list_callbackcodes.append(callback.data)
        list_captions.append(get_attr(callback_data.category, callback_data.subcategory, 'caption'))
        list_urls.append(get_attr(callback_data.category, callback_data.subcategory, 'url_path'))
        with open(r'files/selected_urls.pickle', 'wb') as f:
            pickle.dump(list_urls, file=f)
        sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions) if list_captions else '–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω'
        await callback.message.edit_text(
            text=sel,
            reply_markup=callback.message.reply_markup)
    else:
        await callback.answer('')


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(MenuCD.filter(F.level == '2'))
async def process_delete_button_press(callback: CallbackQuery, callback_data: MenuCD, list_callbackcodes: list, list_captions: list, list_urls: list):
    item_index = int(callback_data.subcategory)
    list_callbackcodes.pop(item_index)
    list_captions.pop(item_index)
    list_urls.pop(item_index)
    if list_captions:
        with open(r'files/selected_urls.pickle', 'wb') as f:
            pickle.dump(list_urls, file=f)
        sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions)
        await callback.message.edit_text(
            text=sel,
            reply_markup=edit_keyboard(list_callbackcodes, list_captions))
    else:
        await callback.message.edit_text(
            text='–ö–ê–¢–ê–õ–û–ì',
            reply_markup=groups_keyboard(CATALOG))


@router.callback_query(Text(text=['TO_BACK']))
async def process_back_button_press(callback: CallbackQuery, list_captions: list, kb_msg_id: list):
    sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions) if list_captions else '–ö–ê–¢–ê–õ–û–ì:'
    kb_msg_id.clear()
    kb_msg_id.append(await callback.message.edit_text(
        text=sel,
        reply_markup=groups_keyboard(CATALOG)))


@router.callback_query(Text(text=['EDIT']))
async def process_edit_button_press(callback: CallbackQuery, list_callbackcodes: list, list_captions: list):
    if list_captions:
        sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions)
        await callback.message.edit_text(
            text=sel,
            reply_markup=edit_keyboard(list_callbackcodes, list_captions))
    else:
        await callback.answer()


@router.callback_query(Text(text=['CANCEL']))
async def process_edit_button_press(callback: CallbackQuery, list_callbackcodes: list, list_captions: list, list_urls: list):
    list_callbackcodes.clear()
    list_captions.clear()
    list_urls.clear()
    await callback.message.edit_reply_markup()
    await callback.message.answer('–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω –Ω–∞–∂–º–∏ /nevatom')


@router.callback_query(Text(text=['START']))
async def process_start_button_press(callback: CallbackQuery, list_captions: list):
    if list_captions:
        with open('files/selected_urls.pickle', 'rb') as fil:
            url_list = pickle.load(fil)

        await callback.message.edit_reply_markup()
        t1 = datetime.now(tz=ZoneInfo('Asia/Vladivostok'))
        await callback.message.answer(f'–°—Ç–∞—Ä—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω {t1.strftime("%H:%M:%S %d.%m.%Y")}')

        logger.info(f'{callback.from_user.id} - –ó–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥')
        filename = await parsing_nevatom.start_parcing(url_list)
        logger.info(f'{callback.from_user.id} - –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω')

        file = FSInputFile(f'files/{filename}.xlsx', filename=f'{filename} {t1.strftime("%H-%M-%S %d-%m-%Y")}.xlsx')
        logger.info(f'{callback.from_user.id} - –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç')
        t2 = datetime.now(tz=ZoneInfo('Asia/Vladivostok'))
        delta = t2 - t1
        await callback.message.answer(f'–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {delta.seconds} —Å–µ–∫.')
        await callback.message.answer_document(file, caption='–í–æ—Ç —Ñ–∞—à —Ñ–∞–π–ª')
        await callback.message.answer(f'–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω –Ω–∞–∂–º–∏ /nevatom')
    else:
        await callback.answer('–°–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π. –î–æ–±–∞–≤—å –≤ –Ω–µ–≥–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')


@router.message()
async def start_handler1(msg: Message, *args, **kwargs):
    logger.info(f'{msg.from_user.id} - –ü—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç: {msg.text}')
    # pprint.pprint(kwargs, indent=4)
    await msg.reply("–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç. –í–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
