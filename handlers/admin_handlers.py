import json
import pprint
import logging
from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, Text, CommandObject
from filters.admin_filters import IsAdmin
from typing import Literal
from models.users import Users, Admins
from markups.inline_keyboards import any_users_keyboard, AnyUsersList

logger = logging.getLogger('logs.admin_handlers')

router = Router()
router.message.filter(IsAdmin())


@router.message(Command("start"))
async def start_handler(msg: Message, *args, **kwargs):
    logger.info(f'{msg.from_user.id} - /start')

    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç SplitHall.\n"
                     "–ö–æ–º–∞–Ω–¥—ã:\n"
                     "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                     "/nevatom - –∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ Nevatom\n\n"
                     )


@router.message(Command("help"))
async def start_handler(msg: Message, *args, **kwargs):
    logger.info(f'{msg.from_user.id} - /help')
    await msg.answer("–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"                     
                     "/adduser id - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id\n"
                     "/addadmin id - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å id\n"
                     "/userlist - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                     "/adminlist - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤\n"
                     "/clearusers - —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                     "/clearadmins - —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤, –∫—Ä–æ–º–µ —Ç–≤–æ–µ–≥–æ\n"
                     )


@router.message(Command(commands=["adduser", 'addadmin']))
async def add_handler(msg: Message, command: CommandObject, bot: Bot, *args, **kwargs):
    logger.info(f'{msg.from_user.id} - /adduser or admin')
    if not command.args:
        await msg.reply('–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤–≤–µ–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª—è–µ–º—ã–π id')
        return
    if not command.args.isdecimal():
        await msg.reply('id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑')
        return

    user_id = int(command.args)
    try:
        await bot.send_message(user_id, 'üëã –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –±–æ—Ç–∞ SplitHall!')
    except Exception as ex:
        await bot.send_message(user_id, '‚ùó –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç SplitHall')
        print(ex)

        return

    if command.command == 'adduser':
        Users.add(user_id)
        text = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    else:
        Admins.add(user_id)
        text = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

    await msg.answer(f"{text} {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")


@router.message(Command(commands=["userlist", 'adminlist']))
async def list_handler(msg: Message, command: CommandObject, bot: Bot, *args, **kwargs):
    logger.info(f'{msg.from_user.id} - /user-adminlist')
    if command.command == 'userlist':
        anyuser_list = Users.get_list()
        is_user_list = True
    else:
        anyuser_list = Admins.get_list()
        is_user_list = False

    if anyuser_list:
        await msg.answer(f'–°–ø–∏—Å–æ–∫', reply_markup=any_users_keyboard(anyuser_list, is_user_list))
    else:
        await msg.answer(f'–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç')


@router.message(Command(commands=["clearusers", 'clearadmins']))
async def list_handler(msg: Message, command: CommandObject, bot: Bot, *args, **kwargs):
    logger.info(f'{msg.from_user.id} - /clearusers-admins')
    if command.command == 'clearusers':
        Users.clear()
        await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã')
    else:
        Admins.clear(msg.from_user.id)
        await msg.answer(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–¥–∞–ª–µ–Ω—ã')


@router.callback_query(AnyUsersList.filter())
async def anyuser_del_press(callback: CallbackQuery, callback_data: AnyUsersList):
    if callback_data.is_user_list:
        removed_id = Users.remove(callback_data.id)
        user_list = Users.get_list()
    else:
        if callback_data.id == callback.from_user.id:
            await callback.message.edit_text(text=f'–°–≤–æ–π id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω')
            return
        removed_id = Admins.remove(callback_data.id)
        user_list = Admins.get_list()
    if user_list:
        await callback.message.edit_text(text=f'–£–¥–∞–ª–µ–Ω {removed_id}', reply_markup=any_users_keyboard(user_list, callback_data.is_user_list))
    else:
        await callback.message.edit_text(text=f'–£–¥–∞–ª–µ–Ω {removed_id}. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç')


@router.callback_query(Text(text=['CANCEL']))
async def anyuser_cancel_press(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)


