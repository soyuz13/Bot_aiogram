from aiogram import F, Router, html, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InputFile
from aiogram.filters import Command, CommandObject, Text
from datetime import datetime
from zoneinfo import ZoneInfo
from keyboards import groups_keyboard, subgroups_keyboard, MenuCD, edit_keyboard
import pprint
import pickle


router = Router()

with open('data.pickle', 'rb') as fil:
    obj = pickle.load(fil)


def get_group_attr(category: int):
    return list(filter(lambda y: y.id == category, obj))[0].caption


def get_attr(category: int, subcategory: int, param: str):
    a = list(filter(lambda x: x.id == category, obj))[0].subgroups
    b = list(filter(lambda y: y.id == subcategory, a))[0]
    dic_ = {'caption': b.__getattribute__('caption'),
            'caption_translit': b.__getattribute__('caption_translit'),
            'url_path': b.__getattribute__('url_path'),
            # 'subgroups': b.__getattribute__('subgroups')
            }
    return dic_[param]


@router.message(Command("start"))
async def start_handler1(msg: Message, *args, **kwargs):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç.\n"
                     "–ö–æ–º–∞–Ω–¥—ã:\n"
                     "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.)\n"
                     "/nevatom - –∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ Nevatom"
                     )
    # await msg.answer()


@router.message(Command("nevatom"))
async def start_handler2(msg: Message, list_callbackcodes: list, list_captions: list, list_urls: list):
    list_callbackcodes.clear()
    list_captions.clear()
    list_urls.clear()
    await msg.answer("–î–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö —Å —Å–∞–π—Ç–∞ Nevatom –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. "
                     "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∏–∂–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.  "
                     "–û–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω.\n"
                     "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª–∞–º –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ '‚¨ÖÔ∏è –ù–ê–ó–ê–î –í –ö–ê–¢–ê–õ–û–ì'.\n"
                     "–í—ã–±–µ—Ä–∏ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–ø—É—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ 'üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ü–û–ò–°–ö'.\n"
                     "–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–∏—à–Ω–µ–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ 'üí¨ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –í–´–ë–†–ê–ù–ù–û–ï'")
    await msg.answer("–ö–ê–¢–ê–õ–û–ì:",
                     reply_markup=groups_keyboard(obj))


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
@router.callback_query(MenuCD.filter(F.level == '0'))
async def process_catalog_button_press(callback: CallbackQuery, callback_data: MenuCD, list_captions: list):
    group_name = get_group_attr(callback_data.category)
    sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions) if list_captions else '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω'
    await callback.message.edit_text(
        text=sel,
        reply_markup=subgroups_keyboard(callback_data.category))


@router.callback_query(MenuCD.filter(F.level == '1'))
async def process_subcategory_button_press(callback: CallbackQuery, callback_data: MenuCD, list_callbackcodes: list, list_captions: list, list_urls: list):
    if callback.data not in list_callbackcodes:
        list_callbackcodes.append(callback.data)
        list_captions.append(get_attr(callback_data.category, callback_data.subcategory, 'caption'))
        list_urls.append(get_attr(callback_data.category, callback_data.subcategory, 'url_path'))
        with open(r'url_list.pickle', 'wb') as f:
            pickle.dump(list_urls, file=f)
        sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions) if list_captions else '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω'
        await callback.message.edit_text(
            text=sel,
            reply_markup=callback.message.reply_markup)
    else:
        await callback.answer('')


@router.callback_query(MenuCD.filter(F.level == '2'))
async def process_delete_button_press(callback: CallbackQuery, callback_data: MenuCD, list_callbackcodes: list, list_captions: list, list_urls: list):
    item_index = int(callback_data.subcategory)
    list_callbackcodes.pop(item_index)
    list_captions.pop(item_index)
    list_urls.pop(item_index)
    if list_captions:
        with open(r'url_list.pickle', 'wb') as f:
            pickle.dump(list_urls, file=f)
        sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions)
        await callback.message.edit_text(
            text=sel,
            reply_markup=edit_keyboard(list_callbackcodes, list_captions))
    else:
        await callback.message.edit_text(
            text='–ö–ê–¢–ê–õ–û–ì:',
            reply_markup=groups_keyboard(obj))


@router.callback_query(Text(text=['TO_BACK']))
async def process_back_button_press(callback: CallbackQuery, list_captions: list):
    sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions) if list_captions else '–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω'
    await callback.message.edit_text(
        text=sel,
        reply_markup=groups_keyboard(obj))


@router.callback_query(Text(text=['EDIT']))
async def process_edit_button_press(callback: CallbackQuery, list_callbackcodes: list, list_captions: list):
    if list_captions:
        sel = '<b>–í—ã–±—Ä–∞–Ω–æ:</b>\n' + '\n'.join(list_captions)
        await callback.message.edit_text(
            text=sel,
            reply_markup=edit_keyboard(list_callbackcodes, list_captions))
    else:
        await callback.answer()


@router.callback_query(Text(text=['START']))
async def process_start_button_press(callback: CallbackQuery, list_captions: list):
    if list_captions:
        from search.search import make_request
        with open('url_list.pickle', 'rb') as fil:
            obj = pickle.load(fil)

        await callback.message.edit_reply_markup()
        t1 = datetime.now(tz=ZoneInfo('Asia/Vladivostok'))
        await callback.message.answer(f'–°—Ç–∞—Ä—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω {t1.strftime("%H:%M:%S %d.%m.%Y")}')
        filename = await make_request(obj)
        file = FSInputFile(filename + '.xlsx', filename=f'{filename} {t1.strftime("%H-%M-%S %d-%m-%Y")}.xlsx')
        t2 = datetime.now(tz=ZoneInfo('Asia/Vladivostok'))
        delta = t2 - t1
        await callback.message.answer(f'–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {delta.seconds} —Å–µ–∫.')
        await callback.message.answer_document(file, caption='–í–æ—Ç —Ñ–∞—à —Ñ–∞–π–ª')
        await callback.message.answer(f'–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω –Ω–∞–∂–º–∏—Ç–µ /nevatom')
    else:
        await callback.answer('–°–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
